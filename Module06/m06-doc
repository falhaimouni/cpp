Module06 main topics :

1. C++ Casts.
    . static_cast → safe, well-defined conversions
     (e.g., int to float, or base-to-derived when safe).
    . dynamic_cast → used for runtime type identification in
      polymorphism classes (Base* to Derived*).
    . const_cast → removes or adds const/volatile from a 
      variables/Pointers/references.
    . reinterpret_cast → low-level, unsafe cast for converting
      between unrelated types (e.g., int to pointer).   

2. Scaler type conversion.
    . How to detect and convert between char, int, float, and double.
    . Handle special floating point values (inf, -inf, NaN).
    . printing rules for each type. (e.g., non-displayable chars).

3. Pointers and Serialization.
    . How pointers work in memory.
    . What is uintptr_t and when to use it. (an unsigned integer type
      capable of holding a pointer).
    . Converting a pointer to an integer type and back safely.

4. polymorphism and virtual functions.
    . How virtual functions work and why they are used.
    . The concept of a vtable (virtual table) for dynamic dispatch.
    . Pure virtual functions and abstract classes.

----------------------------------------------------

C++ Casts :
The casting operators is the modern C++ solution for converting
one type of data safely to another type . This process is called 
is called typevasting where the type of the data is changed to
another type either implicitly (by the compiler) or explictily
by the programmer .


Types of conversion :
1. Implicit conversion (done automatically by the compiler)
    -> Implicit conversion happens automatically when you
      assign a value of one type to another compatible type
  ex : 
    int x = 9;
    float y = x;
    // y = 9.0
  ex :
    float f = 9.99;
    int i = f; // if we conver float to int decimal part lost.
    // i = 9

2. Explicit Conversion (done manually by the programmer)
  -> its called type casting , lets you control how conversions 
     happens .
  ex :
    int a = 5;
    int b = 2;
    float res = (float)a/b; // res = 2.5